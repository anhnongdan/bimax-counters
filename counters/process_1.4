#!/usr/bin/python
import os, sys, time, re, linecache
import logging
logging.basicConfig(filename='/var/log/process_counters.log',level=logging.DEBUG)

from nginx_log_parser import NginxLogParser
from dateutil.parser import parse

from datetime import datetime, timedelta
from pytz import timezone, utc
from pytz.tzinfo import StaticTzInfo
import pygeoip
from netaddr import all_matching_cidrs

#geo_ip = pygeoip.GeoIP("/mnt/app/bimax-counters/GeoIPCity.dat")
#geo_ip = pygeoip.GeoIP("/mnt/app/bimax-counters/GeoIP.dat")
geo_isp = pygeoip.GeoIP("/mnt/app/bimax-counters/counters/GeoIPISP.dat")

has_port = re.compile("^.*\:[0-9]+.*$", re.IGNORECASE)
has_badchar = re.compile("(\$|\%|\+|\*)", re.IGNORECASE)
isp_mobiphone = re.compile("^.*(Lo VP1).*$", re.IGNORECASE)
isp_vnpt = re.compile("^.*(vdc|vnpt).*$", re.IGNORECASE)
isp_viettel = re.compile("^.*(viettel|vietel).*$", re.IGNORECASE)
isp_fpt = re.compile("^.*(fpt|Corporation for Financing|Dai IP dong su dung).*$", re.IGNORECASE)

ips_vinaphone = [ "113.185.0.0/21","113.185.8.0/21", "113.185.16.0/21", "113.185.24.0/21"]
ips_mobiphone = [  '10.54.34.0/24', \
'10.54.67.0/24', \
'10.65.0.0/16', \
'10.66.0.0/16', \
'10.67.0.0/16', \
'10.68.0.0/16', \
'10.69.0.0/16', \
'10.70.0.0/16', \
'10.71.0.0/16', \
'10.72.0.0/16', \
'10.73.0.0/16', \
'10.74.0.0/16', \
'10.75.0.0/16', \
'10.76.0.0/16', \
'10.77.0.0/16', \
'10.78.0.0/16', \
'10.79.0.0/16', \
'10.80.0.0/16', \
'10.81.0.0/16', \
'10.82.0.0/16', \
'10.83.0.0/16', \
'10.84.0.0/16', \
'10.85.0.0/16', \
'10.86.0.0/16', \
'10.87.0.0/16', \
'10.88.0.0/16', \
'10.89.0.0/16', \
'10.90.0.0/16', \
'10.91.0.0/16', \
'10.92.0.0/16', \
'10.93.0.0/16', \
'10.94.0.0/16', \
'10.95.0.0/16', \
'10.96.0.0/16', \
'10.97.0.0/16', \
'10.98.0.0/16', \
'10.99.0.0/16', \
'10.100.0.0/16', \
'10.101.0.0/16', \
'10.102.0.0/16', \
'10.103.0.0/16', \
'10.104.0.0/16', \
'10.105.0.0/16', \
'10.106.0.0/16', \
'10.107.0.0/16', \
'10.108.0.0/16', \
'10.109.0.0/16', \
'10.110.0.0/16', \
'10.111.0.0/16', \
'10.112.0.0/16', \
'10.113.0.0/16', \
'10.114.0.0/16', \
'10.115.0.0/16', \
'10.116.0.0/16', \
'10.117.0.0/16', \
'10.118.0.0/16', \
'10.119.0.0/16', \
'10.120.0.0/16', \
'10.121.0.0/16', \
'10.122.0.0/16', \
'10.123.0.0/16', \
'10.124.0.0/16', \
'10.125.0.0/16', \
'10.126.0.0/16', \
'10.127.0.0/16', \
'10.128.0.0/16', \
'10.129.0.0/16', \
'10.130.0.0/16', \
'10.131.0.0/16', \
'10.132.0.0/16', \
'10.133.0.0/16', \
'10.134.0.0/16', \
'10.135.0.0/16', \
'10.136.0.0/16', \
'10.137.0.0/16', \
'10.138.0.0/16', \
'10.139.0.0/16', \
'10.140.0.0/16', \
'10.141.0.0/16', \
'10.142.0.0/16', \
'10.143.0.0/16', \
'10.144.0.0/16', \
'10.145.0.0/16', \
'10.146.0.0/16', \
'10.147.0.0/16', \
'10.148.0.0/16', \
'10.149.0.0/16', \
'10.150.0.0/16', \
'10.152.0.0/16', \
'10.153.0.0/16', \
'10.163.0.0/16', \
'10.164.0.0/16', \
'10.165.0.0/16', \
'10.166.0.0/16', \
'10.167.0.0/16', \
'10.168.0.0/16', \
'10.169.0.0/16', \
'10.170.0.0/16', \
'10.171.0.0/16', \
'10.172.0.0/16', \
'10.173.0.0/16', \
'10.174.0.0/16', \
'10.175.0.0/16', \
'10.176.0.0/16', \
'10.177.0.0/16', \
'10.178.0.0/16', \
'10.179.0.0/16', \
'10.180.0.0/16', \
'10.181.0.0/16', \
'10.182.0.0/16', \
'10.193.0.0/16', \
'10.194.0.0/16', \
'10.195.0.0/16', \
'10.196.0.0/16', \
'10.199.0.0/16', \
'10.200.0.0/16', \
'10.201.0.0/16', \
'10.202.0.0/16', \
'10.244.0.0/16', \
'10.171.0.0/20', \
'10.171.16.0/20', \
'10.171.160.0/20', \
'10.171.176.0/20', \
'10.172.0.0/20', \
'10.172.16.0/20', \
'10.172.160.0/20', \
'10.172.176.0/20', \
'103.237.66.0/24', \
'113.191.8.128/25', \
'113.187.18.0/24', \
'113.187.19.0/24', \
'113.187.20.0/24', \
'113.187.21.0/24', \
'113.187.22.0/24', \
'113.187.23.0/24', \
'113.187.24.0/24', \
'113.187.25.0/24', \
'103.234.88.0/24', \
'103.234.89.0/24', \
'113.187.0.0/24', \
'113.191.8.0/24', \
'113.187.4.0/24', \
'111.91.234.0/24', \
'222.255.208.0/24', \
'222.255.209.0/24', \
'10.216.0.0/15', \
'10.218.0.0/15', \
'10.220.0.0/15', \
'10.222.0.0/15', \
'10.224.0.0/15', \
'10.226.0.0/15', \
'10.228.0.0/15', \
'10.230.0.0/15', \
'10.232.0.0/15', \
'10.234.0.0/15', \
'10.236.0.0/15', \
'10.238.0.0/15', \
'10.240.0.0/15', \
'10.242.0.0/15', \
'10.110.0.0/15', \
'10.120.0.0/15', \
'10.122.0.0/15', \
'10.148.0.0/15', \
'10.152.0.0/15', \
'10.204.0.0/15', \
'10.206.0.0/15', \
'10.208.0.0/15', \
'10.210.0.0/15', \
'10.212.0.0/15', \
'10.214.0.0/15', \
'10.109.0.0/16', \
'10.181.0.0/16', \
'10.192.0.0/16', \
'10.150.0.0/16', \
'10.182.0.0/16', \
'10.203.0.0/16', \
'37.228.104.0/21', \
'58.67.157.0/24', \
'59.151.95.128/25', \
'59.151.98.128/27', \
'59.151.106.224/27', \
'59.151.120.32/27', \
'80.84.1.0/24', \
'107.167.96.0/19', \
'107.167.102.0/23', \
'107.167.108.0/23', \
'107.167.111.0/25', \
'107.167.112.0/25', \
'107.167.126.0/25', \
'107.167.126.128/26', \
'107.167.127.0/25', \
'91.203.96.0/22', \
'123.103.58.0/24', \
'185.26.180.0/22', \
'195.189.142.0/23', \
'209.170.68.0/24']

class OffsetTime(StaticTzInfo):
    def __init__(self, offset):
        """A dumb timezone based on offset such as +0530, -0600, etc.
        """
        hours = int(offset[:3])
        minutes = int(offset[0] + offset[3:])
        self._utcoffset = timedelta(hours=hours, minutes=minutes)

def load_datetime(value, format):
    if format.endswith('%z'):
        format = format[:-2]
        offset = value[-5:]
        value = value[:-5]
        return OffsetTime(offset).localize(datetime.strptime(value, format))

    return datetime.strptime(value, format)

def dump_datetime(value, format):
    return value.strftime(format)
parser = NginxLogParser('$remote_host - - [$seq_id] nginx: $request_time $remote_addr $sent_http_x_cache [$time_local] ' + \
			'"$request" $http_host $status $body_bytes_sent ' + \
			'"$http_referer" "$http_user_agent" "$http_range"')
import redis
rd = redis.Redis(unix_socket_path='/tmp/redis_counters.sock', db=0)
def validate_ip(s):
    a = s.split('.')
    if len(a) != 4:
        return False
    for x in a:
        if not x.isdigit():
            return False
        i = int(x)
        if i < 0 or i > 255:
            return False
    return True

def do_flush(rd, cache_val):
    pp = rd.pipeline()
    for kk in cache_val:
         vv = float(cache_val[kk])
         type,name = kk.split("###")
         pp.hincrbyfloat(type, name, vv)
    pp.execute()


def PrintException():
    exc_type, exc_obj, tb = sys.exc_info()
    f = tb.tb_frame
    lineno = tb.tb_lineno
    filename = f.f_code.co_filename
    linecache.checkcache(filename)
    line = linecache.getline(filename, lineno, f.f_globals)
    logging.debug('EXCEPTION IN ({}, LINE {} "{}"): {}'.format(filename, lineno, line.strip(), exc_obj))


def do_count(cache_val, tqueue):

    for tval in tqueue:
        kk = "%s###%s" %(tval['type'], tval['name'])
        if kk in cache_val:
            cache_val[kk] = cache_val[kk] + float(tval['val'])
        else:
            cache_val[kk] = float(tval['val'])

def add_queue(tqueue, tqueue1, cur, name, val):
    min = dump_datetime(cur, "%Y%m%d%H%M%z")
    #hour = dump_datetime(cur, "%Y%m%d%H%z")
    #day = dump_datetime(cur, "%Y%m%d%z")
    #mon = dump_datetime(cur, "%Y%m%z")
    #year = dump_datetime(cur, "%Y%z")
    tqueue.append({"type": name, "name": min,"val":val})
    #tqueue1.append({"type": name, "name": hour,"val":val})
    #tqueue1.append({"type": name, "name": day,"val":val})
    #tqueue1.append({"type": name, "name": mon,"val":val})
    #tqueue1.append({"type": name, "name": year,"val":val})

def process(cache_val, message):
    tqueue = []
    tqueue1 = []
    if not message:
        return None
    pp = parser.parse_line(message)
    if not pp:
        return None
    rhost = None
    if "remote_host" in pp:
        rhost = pp["remote_host"]
    if rhost is not None:
        rhost_site = rhost.split('-')[1]
    cat = pp['http_host']

    if re.match(has_port, cat) or re.match(has_badchar, cat):
        return None

    if pp['time_local'] is None or pp['status'] is None or pp['body_bytes_sent'] is None or pp['request_time'] is None:
        return None

    cur = load_datetime(pp['time_local'], '%d/%b/%Y:%H:%M:%S %z')
    localtime5 = dump_datetime(cur, "%Y%m%d%H%M%z")

    add_queue(tqueue, tqueue1, cur,  "rhost_request_count_%s|%s" % (str(pp["status"]), str(rhost)),1)
    add_queue(tqueue, tqueue1, cur, "request_count_%s|%s" % (str(pp["status"]), str(cat)), 1)
    georecord = None
    if pp['status'] == '200' or  pp['status'] == '206':
        add_queue(tqueue, tqueue1, cur, "rhost_body_bytes_sent" + "|"  + rhost, pp["body_bytes_sent"])
        add_queue(tqueue, tqueue1, cur, "rhost_request_time" + "|"  + rhost, pp["request_time"])

        add_queue(tqueue, tqueue1, cur, "body_bytes_sent" + "|"  + cat , pp["body_bytes_sent"])
        add_queue(tqueue, tqueue1, cur, "request_time" + "|"  + cat, pp["request_time"])

	if "sent_http_x_cache" in pp and pp["sent_http_x_cache"].find("HIT") != -1:
            add_queue(tqueue, tqueue1, cur, "cache_status_HIT|%s" % cat, 1)
            add_queue(tqueue, tqueue1, cur,"rhost_cache_status_HIT|%s" % rhost, 1)

        isp = None
        if "remote_addr" in pp and validate_ip(pp["remote_addr"]):
            myip = pp["remote_addr"]
            if isp is None:
                is_vinaphone = all_matching_cidrs(myip, ips_vinaphone)
                if len(is_vinaphone) > 0:
                    isp = 'vinaphone'
            if isp is None:
                isprecord = None
                isprecord1 = geo_isp.org_by_addr(myip)
                if isprecord1 is not None:
                    isprecord = isprecord1.encode('ascii', 'ignore').decode('ascii')
                if isprecord is not None:
                    if re.search(isp_viettel, isprecord):
                        isp = 'viettel'
                    elif re.search(isp_vnpt, isprecord):
                        isp = 'vnpt'
                    elif re.search(isp_fpt, isprecord):
                        isp = 'fpt'
                    elif re.search(isp_mobiphone, isprecord):
                        isp = 'mobiphone'
            if isp is None:
                is_mobiphone = all_matching_cidrs(myip, ips_mobiphone)
                if len(is_mobiphone) > 0:
                    isp = 'mobiphone'

            add_queue(tqueue, tqueue1, cur, "isp_total_request_time_all|total", pp["request_time"])
            add_queue(tqueue, tqueue1, cur, "isp_total_request_count_%s_all|total" % pp["status"] ,1)
            add_queue(tqueue, tqueue1, cur, "isp_total_body_bytes_sent_all|total" , pp["body_bytes_sent"])
            if "sent_http_x_cache" in pp and pp["sent_http_x_cache"].find("HIT") != -1:
               add_queue(tqueue, tqueue1, cur, "isp_total_cache_status_HIT_all|total",1)

            if isp is not None:
                if rhost_site is not None:
                    add_queue(tqueue, tqueue1, cur, "isp_total_request_time_%s|%s" % (isp, rhost_site), pp["request_time"])
                    add_queue(tqueue, tqueue1, cur,  "isp_total_request_count_%s_%s|%s" % (pp["status"], isp, rhost_site), 1)
                    add_queue(tqueue, tqueue1, cur, "isp_total_body_bytes_sent_%s|%s" % (isp, rhost_site), pp["body_bytes_sent"])


                add_queue(tqueue, tqueue1, cur, "isp_total_request_time_%s|total" % isp , pp["request_time"])
                add_queue(tqueue, tqueue1, cur, "isp_total_request_count_%s_%s|total" % (pp["status"], isp) , 1)
                add_queue(tqueue, tqueue1, cur, "isp_total_body_bytes_sent_%s|total" % isp , pp["body_bytes_sent"])

                add_queue(tqueue, tqueue1, cur, "isp_request_time_%s|%s" % (isp, str(cat)) , pp["request_time"])
                add_queue(tqueue, tqueue1, cur, "isp_request_count_%s_%s|%s" % (pp["status"], isp, str(cat)), 1)
                add_queue(tqueue, tqueue1, cur, "isp_body_bytes_sent_%s|%s" % (isp, str(cat)), pp["body_bytes_sent"])

                if "sent_http_x_cache" in pp and pp["sent_http_x_cache"].find("HIT") != -1:
                    add_queue(tqueue, tqueue1, cur, "isp_cache_status_HIT_%s|%s" % (isp, cat), 1)
                    add_queue(tqueue, tqueue1, cur, "isp_total_cache_status_HIT_%s|total" % isp, 1)
                    if rhost_site is not None:
                        add_queue(tqueue, tqueue1, cur,  "isp_total_cache_status_HIT_%s|%s" % (isp, rhost_site), 1)
            ''' 
            georecord = geo_ip.country_code_by_addr(pp["remote_addr"]) 
            if georecord is not None:
                add_queue(tqueue, tqueue1, cur, "country_request_time_%s|total" % georecord, pp["request_time"])
                add_queue(tqueue, tqueue1, cur, "country_request_count_%s_%s|total" % (pp["status"], georecord), 1)
                add_queue(tqueue, tqueue1, cur, "country_body_bytes_sent_%s|total" % georecord, pp["body_bytes_sent"])

                add_queue(tqueue, tqueue1, cur, "country_request_time_%s|%s" % (georecord, str(cat)), pp["request_time"])
                add_queue(tqueue, tqueue1, cur, "country_request_count_%s_%s|%s" % (pp["status"], georecord, str(cat)), 1)
                add_queue(tqueue, tqueue1, cur, "country_body_bytes_sent_%s|%s" % (georecord, str(cat)), pp["body_bytes_sent"])
                if "sent_http_x_cache" in pp and pp["sent_http_x_cache"].find("HIT") != -1:
                    add_queue(tqueue, tqueue1, cur, "country_cache_status_HIT_%s|total" % georecord, 1)
                    add_queue(tqueue, tqueue1, cur, "country_cache_status_HIT_%s|%s" % (georecord, cat), 1)
            '''
            

        if float(pp["request_time"]) > 0.0000001:
            speed_request = float(pp["body_bytes_sent"]) / float(pp["request_time"])
            add_queue(tqueue, tqueue1, cur,  "speed_request" + "|"  + cat , speed_request)
            add_queue(tqueue, tqueue1, cur,  "request_count_2xx|%s" % str(cat), 1)

            add_queue(tqueue, tqueue1, cur, "rhost_speed_request" + "|"  + rhost, speed_request)
            add_queue(tqueue, tqueue1, cur, "rhost_request_count_2xx|%s" % str(rhost), 1)
            '''
            if georecord is not None:
                add_queue(tqueue, tqueue1, cur, "country_speed_request_%s|total" % georecord, speed_request)
                add_queue(tqueue, tqueue1, cur,  "country_request_count_2xx_%s|total" % georecord, 1)

                add_queue(tqueue, tqueue1, cur, "country_speed_request_%s|%s" % (georecord, str(cat)), speed_request)
                add_queue(tqueue, tqueue1, cur,  "country_request_count_2xx_%s|%s" % (georecord, str(cat)), 1)
            '''

            add_queue(tqueue, tqueue1, cur, "isp_total_speed_request_all|total", speed_request)
            add_queue(tqueue, tqueue1, cur, "isp_total_request_count_2xx_all|total", 1)

            if isp is not None:
                add_queue(tqueue, tqueue1, cur, "isp_total_speed_request_%s|total" % isp, speed_request)
                add_queue(tqueue, tqueue1, cur, "isp_total_request_count_2xx_%s|total" % isp, 1)
                add_queue(tqueue, tqueue1, cur, "isp_speed_request_%s|%s" % (isp, str(cat)), speed_request)
                add_queue(tqueue, tqueue1, cur,  "isp_request_count_2xx_%s|%s" % (isp, str(cat)), 1)
                    
    do_count(cache_val, tqueue) 

   
if __name__ == "__main__":
    ff = sys.argv[1]
    cache_val = {}
    with open(ff, "r") as f:
        for line in f:
            try:
                #print line
                process(cache_val, line)
            except:
                PrintException()
                pass
        do_flush(rd, cache_val)
