#!/usr/bin/python
import os
import time

import sys, time
import logging
logging.basicConfig(filename='/tmp/counters.log',level=logging.DEBUG)

from nginx_log_parser import NginxLogParser
from dateutil.parser import parse

from datetime import datetime, timedelta
from pytz import timezone, utc
from pytz.tzinfo import StaticTzInfo

class OffsetTime(StaticTzInfo):
    def __init__(self, offset):
        """A dumb timezone based on offset such as +0530, -0600, etc.
        """
        hours = int(offset[:3])
        minutes = int(offset[0] + offset[3:])
        self._utcoffset = timedelta(hours=hours, minutes=minutes)

def load_datetime(value, format):
    if format.endswith('%z'):
        format = format[:-2]
        offset = value[-5:]
        value = value[:-5]
        return OffsetTime(offset).localize(datetime.strptime(value, format))

    return datetime.strptime(value, format)

def dump_datetime(value, format):
    return value.strftime(format)
parser = NginxLogParser('$remote_host - - [$seq_id] nginx: $request_time $remote_addr $sent_http_x_cache [$time_local] ' + \
			'"$request" $http_host $status $body_bytes_sent ' + \
			'"$http_referer" "$http_user_agent" "$http_range"')
import redis
rd = redis.Redis(unix_socket_path='/tmp/redis_counters.sock', db=0)

def do_flush(rd, cache_val):
    pp = rd.pipeline()
    for kk in cache_val:
         vv = float(cache_val[kk])
         type,name = kk.split("###")
    #     if check_time1(name):
         pp.hincrbyfloat(type, name, vv)
    pp.execute()


def do_count(cache_val, tqueue):
    for tval in tqueue:
        kk = "%s###%s" %(tval['type'], tval['name'])
        if kk in cache_val:
            cache_val[kk] = cache_val[kk] + float(tval['val'])
        else:
            cache_val[kk] = float(tval['val'])

def process(cache_val, message):
    tqueue = []
    if not message:
        return None
    pp = parser.parse_line(message)
    if not pp:
        return None
    rhost = pp["remote_host"]
    cat = pp['http_host']
    if pp['time_local'] is None or pp['status'] is None or pp['body_bytes_sent'] is None or pp['request_time'] is None:
        return None

    cur = load_datetime(pp['time_local'], '%d/%b/%Y:%H:%M:%S %z')
    localtime5 = dump_datetime(cur, "%Y%m%d%H%M%z")

    tqueue.append({
        "type": "rhost_request_count_%s|%s" % (str(pp["status"]), str(rhost)),
        "name":localtime5,
        "val":1})
    tqueue.append({
        "type": "request_count_%s|%s" % (str(pp["status"]), str(cat)),
        "name":localtime5,
        "val":1})
    if pp['status'] == '200' or  pp['status'] == '206':
        tqueue.append({"type": "rhost_body_bytes_sent" + "|"  + rhost, "name": localtime5, "val":pp["body_bytes_sent"]})
        tqueue.append({"type": "body_bytes_sent" + "|"  + cat , "name": localtime5, "val":pp["body_bytes_sent"]})
        tqueue.append({"type": "rhost_request_time" + "|"  + rhost, "name":localtime5, "val":pp["request_time"]})
        tqueue.append({"type": "request_time" + "|"  + cat , "name":localtime5, "val":pp["request_time"]})


        if float(pp["request_time"]) > 0.0000001:
            speed_request = float(pp["body_bytes_sent"]) / float(pp["request_time"])
            tqueue.append({"type": "speed_request" + "|"  + cat , "name": localtime5, "val": speed_request})
            tqueue.append({"type": "rhost_speed_request" + "|"  + rhost, "name": localtime5, "val": speed_request})
            tqueue.append({
                "type": "rhost_request_count_2xx|%s" % str(rhost),
                "name":localtime5,
                "val":1})
            tqueue.append({
                "type": "request_count_2xx|%s" % str(cat),
                "name":localtime5,
                "val":1})
    do_count(cache_val, tqueue) 

   
if __name__ == "__main__":
    ff = sys.argv[1]
    cache_val = {}
    with open(ff, "r") as f:
        for line in f:
            process(cache_val,line)
        do_flush(rd, cache_val)
